
#1.Check Prime number or not>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 

def primenumber(k):
    p = []
    for n in k :
        factor = 0
        for i in range(1,n+1):
             if n%i ==0:
                 factor +=1
        if factor == 2 :
            p.append(n)
    print(p)
k = [2,3,4,5,6,7,11]
print(primenumber(k))






#2.Palindrom Number>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


def palindromnumber(n):
    emp = 0
    while 0 < n:
        # print(n)
        r = n%10
        emp = emp * 10 + r
        n = n // 10
    print(emp)
palindromnumber(123)


#3 Sort a list without Sort Method>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 
lis = [23,2,5 ,1,67, 7]
for i in range(len(lis)) :
    for j in range(len(lis)) :
        if l[i] < l[j] :
            l[i], l[j] = l[j],l[i]
print(l)




#4. Find Factorial A Any Number >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

def factorial(n):
    factor = 1
    for i in range(1,n):
        factor *= i
    print(factor)
factorial(10)


#5 Write a prigramme to find >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Output >>>>>>>>>>

AAA
BBB
CCC

for i in range(4):
    print(chr(64+i)*3)




#6 Write A programe To find the answer >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Output : eno owt eerht ruof evif xis

n = ("one two three four five six")
n = n.split()
rev = ""
for i in n :
    print(i)
    rev = rev + i[::-1] +" "
print(rev)



#7. Write a program To find the answer >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 i / p = A6BC4D5
 O / P = ABCD456

n = "A6BC4D5"
alph = ""
s = sorted(n)
dig = ""
for i in s :
    if i.isalpha():
        alph = alph + i
    else:
        dig = dig + i
print(alph+dig)


#8. Write a prigramme to find the answer >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i/p  =  aaaabbbccd
o /p =  4a3b2c1d

n = "aaaabbbcc"
emp = ""
for i in n :
    c = n.count(i)
    if i not in emp :
        emp = emp + str(c)+ i
        del i
print(emp) 


#9. Write a programme to find  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# i/p = a4k3b2
# o/p = aeknbd 

n = "a4k3b2"
emp = ""
for i in n :
    if i.isalpha():
        ch = (i)
    else:
        emp = emp + ch + chr((ord(ch)+int(i)))
print(emp)


#10. How Middleware work  Explain ?

MIDDLEWARE = [

'middleware.Testmiddlewarel',
'middleware. Testmiddleware2',
'middleware.Testmiddleware3'
]

class BaseTestMiddleware:
    def _init_(self, get_response)
        self.get_response = get_response

    def __call__ (self, request):
        print('Start', self.middleware_name)
        response = self.get_response(request)
        print('End, self.middleware_name)

class Testmiddlewarel (BaseTestMiddleware):

    middleware_name = 'First Middleware!

class Testmiddleware2 (BaseTestMiddleware):

    middleware_name = 'Second Kiddleware!

class Testmiddleware3 (BaseTestMiddleware):

    middleware_name = 'Third Middleware


-> Solution :


In the provided code, we have a base middleware class called BaseTestMiddleware with a call method and a derived class Testmiddlewarel, Testmiddleware2, and Testmiddleware3, each defining a middleware_name attribute.

Let's break down how the request and response flow would work based on the given code:

When a request hits the Django server, the request is initially passed to the first middleware in the MIDDLEWARE setting (in this case, Testmiddlewarel).

The call method of Testmiddlewarel is executed. It prints Start First Middleware! since middleware_name is set to 'First Middleware!'.

The self.get_response(request) line invokes the next middleware in the chain or the view function if it is the last middleware. It passes the request to the next middleware, Testmiddleware2.

The call method of Testmiddleware2 is executed. It prints Start Second Middleware! since middleware_name is set to 'Second Middleware!'.

Similarly, the self.get_response(request) line passes the request to the next middleware, Testmiddleware3.

The call method of Testmiddleware3 is executed. It prints Start Third Middleware! since middleware_name is set to 'Third Middleware!'.

Now, the request reaches the view function or the last middleware if there are no more middlewares in the MIDDLEWARE setting.

The view function processes the request and generates a response.

The response is then passed back through the middleware chain in the reverse order.

The self.get_response(request) line in Testmiddleware3 returns the response to Testmiddleware3.

The print statement End Third Middleware! is executed, indicating that the execution of Testmiddleware3 has ended.

Similarly, the response is passed back to Testmiddleware2, where the print statement End Second Middleware! is executed.

Finally, the response reaches Testmiddlewarel, where the print statement End First Middleware! is executed.

The response is then returned to the client.

In summary, the middleware classes intercept the request and response as it flows through the Django server. 
Each middleware class can perform operations before and after passing the request to the next middleware in the chain.
 The derived classes Testmiddlewarel, Testmiddleware2, and Testmiddleware3 add their own custom behavior by defining the middleware_name attribute.

Please note that in your code, the __init__ method of BaseTestMiddleware has a typo (_init_ instead of __init__).
 It should be corrected to ensure proper initialization of the base middleware class.





